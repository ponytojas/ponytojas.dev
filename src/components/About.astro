---
import { Image } from "astro:assets";

const bunnyImageImports = await Promise.all([
  import("@assets/images/juno-min/photo1.webp"),
  import("@assets/images/juno-min/photo2.webp"),
  import("@assets/images/juno-min/photo3.webp"),
  import("@assets/images/juno-min/photo4.webp"),
  import("@assets/images/juno-min/photo5.webp"),
  import("@assets/images/juno-min/photo6.webp"),
]);

const bunnyImageSrcs = bunnyImageImports.map((img) => img.default.src);
---

<section class="relative w-full max-w-3xl pt-[5em] md:pt-[5em]" id="about">
  <h2 class="text-4xl font-bold mb-8">About me and this site</h2>
  <article class="flex flex-col gap-4 w-full">
    <p class="text-wrap prose dark:prose-invert">
      Hey there! I'm a spaniard <strong><i>software engineer</i></strong> leavin
      in Valencia, who gets genuinely excited about all things tech. I don't just
      build systems that work—I craft solutions that scale elegantly, stay maintainable
      over time, and evolve without headaches. What really drives me is seeing how
      architectural choices ripple through an entire project, which is why I tend
      to think big picture—considering everything from server infrastructure to that
      final pixel-perfect user experience.
    </p>
    <p class="text-wrap prose dark:prose-invert">
      I've developed a particular fascination with geospatial data and its
      real-world applications in <strong><i>transportation</i></strong>, <strong
        ><i>urban mobility</i></strong
      >, and <strong><i>traffic management</i></strong>. It's incredibly
      satisfying to see data transform into solutions that help people move more
      efficiently! Over the years, I've had the chance to work with cutting-edge <strong
        ><i>V2X</i></strong
      > (vehicle-to-everything) systems, where I helped create smart, collaborative
      technologies that connect vehicles with their surrounding environment.
    </p>
    <p class="text-wrap prose dark:prose-invert">
      There's something deeply satisfying about designing systems where each
      component knows exactly what it's supposed to do and talks smoothly with
      others. My toolkit includes
      <a
        href="https://react.dev/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#36789b]"
      >
        React
      </a>
      , <a
        href="https://www.typescriptlang.org/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#3178c6]"
      >
        TypeScript
      </a>,
      <a
        href="https://bun.sh/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[rgb(249,241,225)] text-outline-black"
        >Bun</a
      >,
      <a
        href="https://astro.build/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#3d4dff]"
        >Astro</a
      >
      , <a
        href="https://go.dev/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#007d9c]"
        >Golang</a
      >, <a
        href="https://flutter.dev/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#1a73e8]"
        >Flutter</a
      >, <a
        href="https://www.mongodb.com/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#00ED64]"
        >Mongo</a
      >, <a
        href="https://www.postgresql.org/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#336791]"
        >PostgreSQL</a
      > or <a
        href="https://tailwindcss.com/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#00a6f4]"
        >TailwindCSS</a
      >. I get a weird thrill from automating repetitive tasks, fine-tuning
      deployment pipelines, and optimizing database queries until everything
      runs like a well-oiled machine. My philosophy? Create thoughtful
      simplicity—abstract away complexity without losing control or
      understanding of what's happening under the hood.
    </p>
    <p class="text-wrap prose dark:prose-invert">
      When I'm not at work, I'm usually tinkering with some personal
      project—maybe a utility tool that scratches my own itch, a visualization
      that makes complex data more approachable, or experimenting with some new
      tech I'm curious about. This website itself is one of those playgrounds
      where I get to try things out! Though I don't call myself a designer, I'm
      endlessly curious about how people interact with technology, so I obsess
      over little usability details and those "aha!" moments in user experience.
    </p>
    <p class="text-wrap prose dark:prose-invert">
      Oh, and I should mention my tiny but mighty roommate:
      <span
        class="relative group inline-block cursor-pointer hover-trigger underline decoration-dotted underline-offset-4"
      >
        my lop-eared bunny
        <span
          class="absolute left-1/2 -translate-x-1/2 bottom-full mb-2 w-64 invisible group-hover:visible opacity-0 group-hover:opacity-100 transition-all duration-300 rounded-lg z-50 bunny-image-container"
          ><Image
            src={bunnyImageImports[0].default}
            alt="Bunny"
            width={256}
            class="rounded-lg w-full h-auto transition-opacity duration-300 ease-in-out"
          />
        </span>
      </span>. She's tiny, adorably fluffy, and definitely the one who actually
      runs the household around here.
    </p>
    <br />
    <p class="text-wrap prose dark:prose-invert">
      This site was crafted using <a
        href="https://astro.build/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#3d4dff]"
        >Astro</a
      > and <a
        href="https://tailwindcss.com/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#00a6f4]"
        >TailwindCSS</a
      >, with vanilla JavaScript and just two dependencies: <a
        href="https://photoswipe.com/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4"
        >photoswipe</a
      > and <a
        href="https://astro-embed.netlify.app/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4"
        >astro-embed</a
      >. It's deployed on a <a
        href="https://tailwindcss.com/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#d50c2d]"
        >Hetzner</a
      > VPS with <a
        href="https://www.coolify.io/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#6b16ed]"
        >Coolify</a
      > and <a
        href="https://www.coolify.io/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#ff6633]"
        >Cloudflare</a
      >.
    </p>
  </article>
</section>

<style>
  .fade-out {
    opacity: 0;
  }
  .fade-in {
    opacity: 1;
  }
</style>

<script define:vars={{ bunnyImageSrcs }}>
  const preloadedImages = [];
  let isTouch = false;

  // Detect touch device
  window.addEventListener("touchstart", function onFirstTouch() {
    isTouch = true;
    window.removeEventListener("touchstart", onFirstTouch);
  });

  const preloadImages = (urls) => {
    return Promise.all(
      urls.map((url) => {
        return new Promise((resolve, reject) => {
          const img = new Image();
          img.onload = () => {
            preloadedImages.push(img);
            resolve(img);
          };
          img.onerror = reject;
          img.src = url;
        });
      })
    );
  };

  const initializeImageRotation = () => {
    const hoverTriggers = document.querySelectorAll(".hover-trigger");

    hoverTriggers.forEach((trigger) => {
      let rotationInterval = null;
      let currentIndex = 0;
      let isActive = false;
      const imageElement = trigger.querySelector("img");
      const imageContainer = trigger.querySelector(".bunny-image-container");

      if (!imageElement || !imageContainer) return;

      const updateImage = () => {
        imageElement.classList.add("fade-out");

        setTimeout(() => {
          currentIndex = (currentIndex + 1) % preloadedImages.length;
          imageElement.src = preloadedImages[currentIndex].src;
          imageElement.classList.remove("fade-out");
        }, 300);
      };

      const startRotation = () => {
        if (isActive) return;
        isActive = true;

        currentIndex = 0;
        imageElement.src = preloadedImages[currentIndex].src;
        imageElement.classList.remove("fade-out");
        imageContainer.style.visibility = "visible";
        imageContainer.style.opacity = "1";

        if (rotationInterval) clearInterval(rotationInterval);
        rotationInterval = setInterval(updateImage, 3000);
      };

      const stopRotation = () => {
        if (!isActive) return;
        isActive = false;

        if (rotationInterval) {
          clearInterval(rotationInterval);
          rotationInterval = null;
        }

        imageElement.classList.add("fade-out");
        imageContainer.style.visibility = "hidden";
        imageContainer.style.opacity = "0";

        setTimeout(() => {
          currentIndex = 0;
          imageElement.src = preloadedImages[0].src;
          imageElement.classList.remove("fade-out");
        }, 300);
      };

      // Desktop events
      trigger.addEventListener("mouseenter", () => {
        if (!isTouch) startRotation();
      });

      trigger.addEventListener("mouseleave", () => {
        if (!isTouch) stopRotation();
      });

      // Mobile events
      trigger.addEventListener("touchstart", (e) => {
        e.preventDefault(); // Prevent text selection
        if (isActive) {
          stopRotation();
        } else {
          startRotation();
        }
      });

      // Handle clicks outside the trigger area
      document.addEventListener("touchstart", (e) => {
        if (isActive && !trigger.contains(e.target)) {
          stopRotation();
        }
      });

      // Clean up on page visibility change
      document.addEventListener("visibilitychange", () => {
        if (document.hidden && isActive) {
          stopRotation();
        }
      });
    });
  };

  // Initialize everything once images are loaded
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      preloadImages(bunnyImageSrcs)
        .then(() => {
          initializeImageRotation();
        })
        .catch((error) => {
          console.error("Error preloading images:", error);
        });
    });
  } else {
    preloadImages(bunnyImageSrcs)
      .then(() => {
        initializeImageRotation();
      })
      .catch((error) => {
        console.error("Error preloading images:", error);
      });
  }
</script>
