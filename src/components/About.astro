---
import { Image } from "astro:assets";

const bunnyImageImports = await Promise.all([
  import("@assets/images/juno-min/photo1.webp"),
  import("@assets/images/juno-min/photo2.webp"),
  import("@assets/images/juno-min/photo3.webp"),
  import("@assets/images/juno-min/photo4.webp"),
  import("@assets/images/juno-min/photo5.webp"),
  import("@assets/images/juno-min/photo6.webp"),
]);

const bunnyImageSrcs = bunnyImageImports.map((img) => img.default.src);
---

<section class="relative w-full max-w-3xl pt-[5em] md:pt-[5em]" id="about">
  <h2 class="text-4xl font-bold mb-8">About me and this site</h2>
  <article class="flex flex-col gap-4 w-full">
    <p class="text-wrap prose dark:prose-invert">
      I'm a <strong><i>software engineer</i></strong> with a deep passion for everything
      tech-related. I love building systems that don't just work well, but scale
      smoothly, are easy to maintain, and can grow without friction. I'm especially
      interested in how architectural decisions impact the final experience, so I
      tend to approach projects with a holistic mindset—thinking about infrastructure,
      data, business logic, and user experience all together.
    </p>
    <p class="text-wrap prose dark:prose-invert">
      One of my main focuses is geospatial data analysis and how it can be
      applied to real-world challenges like <strong
        ><i>transportation</i></strong
      >, <strong><i>urban mobility</i></strong>, and <strong
        ><i>traffic management</i></strong
      >. Over the years, I've worked on integrating different technologies in
      these areas, including <strong><i>V2X</i></strong>
      (vehicle-to-everything) systems, where I helped develop collaborative and intelligent
      solutions.
    </p>
    <p class="text-wrap prose dark:prose-invert">
      I enjoy designing modular, efficient infrastructures where each service
      has a clear purpose and communicates effectively with others. I work with
      different tools and languages like
      <a
        href="https://react.dev/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#36789b]"
      >
        React
      </a>
      , <a
        href="https://www.typescriptlang.org/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#3178c6]"
      >
        TypeScript
      </a>,
      <a
        href="https://bun.sh/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[rgb(249,241,225)] text-outline-black"
        >Bun</a
      >,
      <a
        href="https://astro.build/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#3d4dff]"
        >Astro</a
      >
      , <a
        href="https://go.dev/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#007d9c]"
        >Golang</a
      >, <a
        href="https://flutter.dev/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#1a73e8]"
        >Flutter</a
      >, <a
        href="https://www.mongodb.com/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#00ED64]"
        >Mongo</a
      >, <a
        href="https://www.postgresql.org/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#336791]"
        >PostgreSQL</a
      > or <a
        href="https://tailwindcss.com/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#00a6f4]"
        >TailwindCSS</a
      >, and I find joy in automating workflows, fine-tuning deployments, or
      optimizing databases so everything runs like clockwork. I believe in
      thoughtful simplicity and the power of abstracting complexity without
      losing control.
    </p>
    <p class="text-wrap prose dark:prose-invert">
      Outside of work, I always have a personal project going—whether it's a
      tool, a data visualization, a technical experiment, or an upgrade to this
      very site, which doubles as my playground and personal space. I'm also
      very interested in how people interact with technology, so even though I'm
      not a designer, I care deeply about usability and the overall experience.
    </p>
    <p class="text-wrap prose dark:prose-invert">
      Oh, and at home, I share my space with a very special companion:
      <span
        class="relative group inline-block cursor-pointer hover-trigger underline decoration-dotted underline-offset-4"
      >
        my lop-eared bunny
        <span
          class="absolute left-1/2 -translate-x-1/2 bottom-full mb-2 w-64 invisible group-hover:visible opacity-0 group-hover:opacity-100 transition-all duration-300 rounded-lg z-50 bunny-image-container"
          ><Image
            src={bunnyImageImports[0].default}
            alt="Bunny"
            width={256}
            loading="lazy"
            decoding="async"
            class="rounded-lg w-full h-auto transition-opacity duration-300 ease-in-out"
          />
        </span>
      </span>. She's small, adorable, and probably the real boss around here.
    </p>
    <br />
    <p class="text-wrap prose dark:prose-invert">
      All this website was built using just <a
        href="https://astro.build/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#3d4dff]"
        >Astro</a
      >, with <a
        href="https://tailwindcss.com/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#00a6f4]"
        >TailwindCSS</a
      >, vanilla JavaScript and just two dependencies <a
        href="https://photoswipe.com/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4"
        >photoswipe</a
      > and <a
        href="https://astro-embed.netlify.app/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4"
        >astro-embed</a
      >. Deployed in a <a
        href="https://tailwindcss.com/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#d50c2d]"
        >Hetzner</a
      > VPS with <a
        href="https://www.coolify.io/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#6b16ed]"
        >Coolify</a
      > and <a
        href="https://www.coolify.io/"
        target="_blank"
        class="underline mt-2 decoration-dotted underline-offset-4 text-[#ff6633]"
        >Cloudflare</a
      >.
    </p>
  </article>
</section>

<style>
  .fade-out {
    opacity: 0;
  }
  .fade-in {
    opacity: 1;
  }
</style>

<script define:vars={{ bunnyImageSrcs }}>
  const preloadedImages = [];
  let isTouch = false;

  // Detect touch device
  window.addEventListener("touchstart", function onFirstTouch() {
    isTouch = true;
    window.removeEventListener("touchstart", onFirstTouch);
  });

  const preloadImages = (urls) => {
    return Promise.all(
      urls.map((url) => {
        return new Promise((resolve, reject) => {
          const img = new Image();
          img.onload = () => {
            preloadedImages.push(img);
            resolve(img);
          };
          img.onerror = reject;
          img.src = url;
        });
      })
    );
  };

  const initializeImageRotation = () => {
    const hoverTriggers = document.querySelectorAll(".hover-trigger");

    hoverTriggers.forEach((trigger) => {
      let rotationInterval = null;
      let currentIndex = 0;
      let isActive = false;
      const imageElement = trigger.querySelector("img");
      const imageContainer = trigger.querySelector(".bunny-image-container");

      if (!imageElement || !imageContainer) return;

      const updateImage = () => {
        imageElement.classList.add("fade-out");

        setTimeout(() => {
          currentIndex = (currentIndex + 1) % preloadedImages.length;
          imageElement.src = preloadedImages[currentIndex].src;
          imageElement.classList.remove("fade-out");
        }, 300);
      };

      const startRotation = () => {
        if (isActive) return;
        isActive = true;

        currentIndex = 0;
        imageElement.src = preloadedImages[currentIndex].src;
        imageElement.classList.remove("fade-out");
        imageContainer.style.visibility = "visible";
        imageContainer.style.opacity = "1";

        if (rotationInterval) clearInterval(rotationInterval);
        rotationInterval = setInterval(updateImage, 3000);
      };

      const stopRotation = () => {
        if (!isActive) return;
        isActive = false;

        if (rotationInterval) {
          clearInterval(rotationInterval);
          rotationInterval = null;
        }

        imageElement.classList.add("fade-out");
        imageContainer.style.visibility = "hidden";
        imageContainer.style.opacity = "0";

        setTimeout(() => {
          currentIndex = 0;
          imageElement.src = preloadedImages[0].src;
          imageElement.classList.remove("fade-out");
        }, 300);
      };

      // Desktop events
      trigger.addEventListener("mouseenter", () => {
        if (!isTouch) startRotation();
      });

      trigger.addEventListener("mouseleave", () => {
        if (!isTouch) stopRotation();
      });

      // Mobile events
      trigger.addEventListener("touchstart", (e) => {
        e.preventDefault(); // Prevent text selection
        if (isActive) {
          stopRotation();
        } else {
          startRotation();
        }
      });

      // Handle clicks outside the trigger area
      document.addEventListener("touchstart", (e) => {
        if (isActive && !trigger.contains(e.target)) {
          stopRotation();
        }
      });

      // Clean up on page visibility change
      document.addEventListener("visibilitychange", () => {
        if (document.hidden && isActive) {
          stopRotation();
        }
      });
    });
  };

  // Initialize everything once images are loaded
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      preloadImages(bunnyImageSrcs)
        .then(() => {
          initializeImageRotation();
        })
        .catch((error) => {
          console.error("Error preloading images:", error);
        });
    });
  } else {
    preloadImages(bunnyImageSrcs)
      .then(() => {
        initializeImageRotation();
      })
      .catch((error) => {
        console.error("Error preloading images:", error);
      });
  }
</script>
