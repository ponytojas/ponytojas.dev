---
interface Props {
  links: Array<{ href: string; label: string }>;
}
const { links = [] } = Astro.props;
---

<div
  class="fixed bottom-8 w-screen flex justify-center z-50"
  data-alignment="center"
>
  <!-- Container for button + menu -->
  <div class="menu-container relative">
    <!-- Floating Menu Button/Container -->
    <div
      id="floatingMenu"
      class="relative bg-[#17171c] dark:bg-[#fafaee] rounded-full shadow-lg flex flex-col transition-all duration-300 overflow-hidden"
      style="width: 120px; height: 44px;"
    >
      <!-- Button Header (always visible) -->
      <div
        class="flex items-center justify-center px-3 py-2 cursor-pointer h-[44px] min-h-[44px]"
        id="menuToggle"
      >
        <div class="flex items-center mr-2">
          <!-- Progress SVG -->
          <svg
            class="w-8 h-8"
            viewBox="0 0 100 50"
            fill="none"
            stroke-linecap="round"
          >
            <!-- LINE 1 -->
            <line
              x1="10"
              y1="10"
              x2="50"
              y2="10"
              stroke="var(--line-bg)"
              stroke-width="8"
              stroke-dasharray="50"
              stroke-dashoffset="0"></line>
            <line
              x1="10"
              y1="10"
              x2="50"
              y2="10"
              stroke="var(--line-fg)"
              stroke-width="8"
              stroke-dasharray="50"
              stroke-dashoffset="50"
              class="progress-line"></line>

            <!-- LINE 2 -->
            <line
              x1="10"
              y1="25"
              x2="65"
              y2="25"
              stroke="var(--line-bg)"
              stroke-width="8"
              stroke-dasharray="65"
              stroke-dashoffset="0"></line>
            <line
              x1="10"
              y1="25"
              x2="65"
              y2="25"
              stroke="var(--line-fg)"
              stroke-width="8"
              stroke-dasharray="65"
              stroke-dashoffset="65"
              class="progress-line"></line>

            <!-- LINE 3 -->
            <line
              x1="10"
              y1="40"
              x2="40"
              y2="40"
              stroke="var(--line-bg)"
              stroke-width="8"
              stroke-dasharray="40"
              stroke-dashoffset="0"></line>
            <line
              x1="10"
              y1="40"
              x2="40"
              y2="40"
              stroke="var(--line-fg)"
              stroke-width="8"
              stroke-dasharray="40"
              stroke-dashoffset="40"
              class="progress-line"></line>
          </svg>
        </div>

        <span
          class="flex items-center gap-1 text-sm font-medium text-[#fafaee] dark:text-[#17171c]"
        >
          Index
          <svg
            class="w-4 h-4 transform transition-transform duration-300"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            viewBox="0 0 24 24"
            id="arrow-icon"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9"></path>
          </svg>
        </span>
      </div>

      <!-- Menu Items List -->
      <ul
        id="menuList"
        class="menu-list opacity-0 max-h-0 overflow-hidden w-full px-4 space-y-3 text-sm text-[#fafaee] dark:text-[#17171c] transition-all duration-300"
      >
        {
          links.map((link) => (
            <li>
              <a
                href={link.href}
                class="block hover:bg-gray-700 dark:hover:bg-gray-200 dark:hover:text-[#17171c] px-2 py-1 rounded transition-colors"
                data-menu-link
              >
                {link.label}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</div>

<!-- Styles -->
<style>
  /* Variables for the line colors */
  :root {
    --line-bg: rgba(150, 150, 150, 0.5);
    --line-fg: white;
  }

  :root.dark {
    --line-bg: rgba(100, 100, 100, 0.5);
    --line-fg: #17171c;
  }

  /* Menu styles */
  .menu-container {
    z-index: 50;
  }

  /* Active state for the chevron icon */
  #arrow-icon.rotated {
    transform: rotate(180deg);
  }

  /* Menu list items */
  .menu-list {
    transition: all 0.3s ease;
    pointer-events: none;
  }

  .menu-list.visible {
    opacity: 1;
    pointer-events: auto;
    max-height: 500px;
    padding-top: 1rem;
    padding-bottom: 1rem;
  }
</style>

<!-- Client Script -->
<script>
  document.addEventListener("DOMContentLoaded", () => {
    floatingMenu.style.width = "120px";
    floatingMenu.style.borderRadius = "22px";
    floatingMenu.style.height = "44px"; // Ensure it's not "auto" initially
    floatingMenu.style.transition = "all 0.3s ease"; // Explicitly set transition
  });

  // SCROLL-BASED PROGRESS ANIMATION
  const progressLines = document.querySelectorAll(".progress-line");

  function lineFill(scrollP, start, end) {
    if (scrollP <= start) return 0;
    if (scrollP >= end) return 1;
    return (scrollP - start) / (end - start);
  }

  function updateScrollProgress() {
    const scrollTop = window.scrollY;
    const docHeight =
      document.documentElement.scrollHeight * 1.5 - window.innerHeight;
    const scrollPercent = docHeight > 0 ? scrollTop / docHeight : 0;

    progressLines.forEach((line, index) => {
      const i = index % 3; // 3 progress lines per group
      const dashLength = parseFloat(
        line.getAttribute("stroke-dasharray") || "80"
      );
      const start = i * 0.15;
      const end = (i + 1) * 0.15;
      const fraction = lineFill(scrollPercent, start, end);
      const offset = dashLength * (1 - fraction);
      line.style.strokeDashoffset = offset.toString();
    });
  }

  window.addEventListener("scroll", updateScrollProgress, { passive: true });
  updateScrollProgress();

  // MENU TOGGLING
  const menuToggle = document.getElementById("menuToggle");
  const floatingMenu = document.getElementById("floatingMenu");
  const menuList = document.getElementById("menuList");
  const arrowIcon = document.getElementById("arrow-icon");
  const backdrop = document.getElementById("backdrop");
  let isExpanded = false;
  let expandedWidth = "240px"; // Store the expanded width
  let expandedBorderRadius = "24px"; // Store the expanded border radius

  // Set initial dimensions for accurate transitions
  document.addEventListener("DOMContentLoaded", () => {
    // Force layout calculation to ensure styles are applied properly
    floatingMenu.getBoundingClientRect();
  });

  function toggleMenu(expand) {
    isExpanded = expand;

    if (expand) {
      floatingMenu.style.width = expandedWidth;
      floatingMenu.style.borderRadius = expandedBorderRadius;
      floatingMenu.style.height = "auto";

      // Show menu items
      menuList.classList.add("visible");
      arrowIcon.classList.add("rotated");
      backdrop.classList.remove("hidden");
    } else {
      // Collapse the menu
      floatingMenu.style.width = "120px";
      floatingMenu.style.minHeight = "44px";
      floatingMenu.style.borderRadius = "22px";
      menuList.classList.remove("visible");
      arrowIcon.classList.remove("rotated");
      backdrop.classList.add("hidden");
    }
  }

  // Toggle menu when clicking the button
  menuToggle?.addEventListener("click", (event) => {
    event.stopPropagation();
    toggleMenu(!isExpanded);
  });

  // Close menu when clicking the backdrop
  backdrop?.addEventListener("click", () => {
    toggleMenu(false);
  });

  // Fix link click handler
  document.querySelectorAll("[data-menu-link]").forEach((link) => {
    link.addEventListener("click", (e) => {
      // Stop event from bubbling to prevent immediate menu collapse
      e.stopPropagation();

      // Important: Stop propagation to document click handler
      // that would close the menu before the link click is processed
      e.stopImmediatePropagation();

      // Let the navigation happen naturally
      return true;
    });
  });

  // Close menu when clicking anywhere outside of menu links or the menu itself
  document.addEventListener("click", (event) => {
    const clickedElement = event.target;
    const isMenuLink = clickedElement.closest("[data-menu-link]");
    const isMenuElement = floatingMenu.contains(clickedElement);

    if (isExpanded && !isMenuLink && !isMenuElement) {
      toggleMenu(false);
    }
  });

  // Close menu when pressing Escape
  document.addEventListener("keydown", (event) => {
    if (event.key === "Escape" && isExpanded) {
      toggleMenu(false);
    }
  });
</script>
