---
interface Props {
  links: Array<{ href: string; label: string }>;
}
const { links = [] } = Astro.props;
---

<div
  class="flex fixed bottom-8 w-screen justify-center z-50"
  data-alignment="center"
>
  <!-- Container for button + popover -->
  <div class="relative flex flex-row w-screen justify-center">
    <!-- Button (trigger) -->
    <button
      type="button"
      class="trigger w-auto h-11 flex items-center justify-start gap-2 px-2 rounded-full cursor-pointer transition-colors duration-200
      bg-[#17171c] dark:bg-[#fafaee] text-[#fafaee] dark:text-[#17171c] shadow-lg hover:bg-[#17171c]/[0.9] hover:text-[#fafaee] dark:hover:bg-[#fafaee]/[0.8] dark:hover:text-[#17171c]"
    >
      <div class="flex items-center gap-4 flex-1">
        <!-- 3 lines in an SVG, each has:
             - A gray "background" line, fully drawn
             - A white "foreground" line, drawn from left->right as you scroll
        -->
        <svg
          class="w-10 h-8"
          viewBox="0 0 100 50"
          fill="none"
          stroke-linecap="round"
        >
          <!-- LINE 1 -->
          <line
            x1="10"
            y1="10"
            x2="50"
            y2="10"
            stroke="var(--line-bg)"
            stroke-width="8"
            stroke-dasharray="50"
            stroke-dashoffset="0"></line>
          <line
            x1="10"
            y1="10"
            x2="50"
            y2="10"
            stroke="var(--line-fg)"
            stroke-width="8"
            stroke-dasharray="50"
            stroke-dashoffset="50"
            class="progress-line"></line>

          <!-- LINE 2 -->
          <line
            x1="10"
            y1="25"
            x2="65"
            y2="25"
            stroke="var(--line-bg)"
            stroke-width="8"
            stroke-dasharray="65"
            stroke-dashoffset="0"></line>
          <line
            x1="10"
            y1="25"
            x2="65"
            y2="25"
            stroke="var(--line-fg)"
            stroke-width="8"
            stroke-dasharray="65"
            stroke-dashoffset="65"
            class="progress-line"></line>

          <!-- LINE 3 -->
          <line
            x1="10"
            y1="40"
            x2="40"
            y2="40"
            stroke="var(--line-bg)"
            stroke-width="8"
            stroke-dasharray="40"
            stroke-dashoffset="0"></line>
          <line
            x1="10"
            y1="40"
            x2="40"
            y2="40"
            stroke="var(--line-fg)"
            stroke-width="8"
            stroke-dasharray="40"
            stroke-dashoffset="40"
            class="progress-line"></line>
        </svg>

        <span class="flex items-center gap-1 text-sm font-medium">
          Index
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9"></path>
          </svg>
        </span>
      </div>
    </button>

    <!-- Popover -->
    <div
      id="indexPopover"
      class="popover
             absolute bottom-12 left-1/2 -translate-x-1/2
             w-64 rounded-md bg-[#17171c] dark:bg-[#fafaee] text-[#fafaee] dark:text-[#17171c] p-4 shadow-lg
             transition-all duration-200 ease-out
             origin-bottom"
    >
      <ul class="space-y-2 text-sm">
        {
          links.map((link) => (
            <li>
              <a
                href={link.href}
                class="block hover:bg-gray-700 dark:hover:text-[#fafaee] px-2 py-1 rounded transition-colors"
              >
                {link.label}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</div>

<!-- Styles -->
<style is:global>
  /* Position the trigger */
  .trigger {
    position: fixed;
    bottom: 2rem;
  }

  /* Fallback styling for browsers without popover support */
  #indexPopover {
    display: none;
  }

  /* When we want the popover "open", we'll remove 'hidden' and handle transitions. */
  .popover.show {
    display: block; /* or inline-block, if you prefer */
    opacity: 1; /* fade in */
    transform: scale(1); /* pop in */
  }
</style>

<!-- Client Script -->
<script>
  // SCROLL-BASED PROGRESS ANIMATION
  const progressLines = document.querySelectorAll(".progress-line");

  function lineFill(scrollP, start, end) {
    if (scrollP <= start) return 0;
    if (scrollP >= end) return 1;
    return (scrollP - start) / (end - start);
  }

  function updateScrollProgress() {
    const scrollTop = window.scrollY;
    const docHeight =
      document.documentElement.scrollHeight * 1.5 - window.innerHeight;
    const scrollPercent = docHeight > 0 ? scrollTop / docHeight : 0;

    progressLines.forEach((line, index) => {
      const i = index % 3; // 3 progress lines per group
      const dashLength = parseFloat(
        line.getAttribute("stroke-dasharray") || "80"
      );
      const start = i * 0.15;
      const end = (i + 1) * 0.15;
      const fraction = lineFill(scrollPercent, start, end);
      const offset = dashLength * (1 - fraction);
      line.style.strokeDashoffset = offset.toString();
    });
  }

  window.addEventListener("scroll", updateScrollProgress, { passive: true });
  updateScrollProgress();

  // POPOVER TOGGLING
  const trigger = document.querySelector(".trigger");
  const popover = document.getElementById("indexPopover");
  const links = popover?.querySelectorAll("a");
  let popoverOpen = false;

  function closePopover() {
    if (popoverOpen) {
      popoverOpen = false;
      popover.classList.remove("show");
      popover.addEventListener(
        "transitionend",
        function handler() {
          popover.classList.add("hidden");
          popover.style.display = "none";
          popover.removeEventListener("transitionend", handler);
        },
        { once: true }
      );
    }
  }

  trigger?.addEventListener("click", (event) => {
    event.stopPropagation(); // Prevent immediate closing from outside click
    popoverOpen = !popoverOpen;

    if (popover) {
      if (popoverOpen) {
        popover.classList.remove("hidden");
        popover.style.display = "block";

        requestAnimationFrame(() => {
          popover.classList.add("show");
        });
      } else {
        closePopover();
      }
    }
  });

  // Close popover when clicking outside
  document.addEventListener("click", (event) => {
    if (
      popoverOpen &&
      !popover.contains(event.target) &&
      !trigger.contains(event.target)
    ) {
      closePopover();
    }
  });

  // Close popover when clicking on a list item
  links.forEach((link) => {
    link.addEventListener("click", () => {
      closePopover();
    });
  });
</script>
